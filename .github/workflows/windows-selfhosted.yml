name: Windows (self-hosted MSYS2 MinGW64)

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: CMAKE_BUILD_TYPE (Debug/Release)
        required: false
        default: Debug

jobs:
  windows-msys2:
    # Match your runner labels: use your custom label ANYKS
    runs-on: [ self-hosted, ANYKS ]
    steps:
      - uses: actions/checkout@v4

      - name: Print runner info
        shell: powershell
        run: |
          Write-Host "Runner OS: $env:RUNNER_OS"
          Write-Host "MSYS2 path exists: " (Test-Path "C:\msys64")

      - name: Select MSYS2 shell (mingw64 preferred)
        shell: powershell
        run: |
          $shell = "C:\\msys64\\mingw64.exe"
          if (-Not (Test-Path $shell)) {
            $shell = "C:\\msys64\\usr\\bin\\bash.exe"
          }
          "BASH=$shell" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - name: Ensure E:\io exists
        shell: powershell
        run: |
          New-Item -ItemType Directory -Path "E:\\io" -Force | Out-Null

      - name: Configure (MSYS2 MinGW64)
        shell: cmd
        run: |
          "%BASH%" -lc "export PATH=/mingw64/bin:$PATH; BUILD_WIN='E:/io'; BUILD=$(cygpath -u \"$BUILD_WIN\"); cmake -S . -B \"$BUILD\" -G 'Ninja' -DCMAKE_BUILD_TYPE=${{ github.event.inputs.build_type }} -DIO_BUILD_TESTS=OFF -DIO_BUILD_EXAMPLES=ON"

      - name: Build (MSYS2 MinGW64)
        shell: cmd
        run: |
          "%BASH%" -lc "export PATH=/mingw64/bin:$PATH; BUILD_WIN='E:/io'; BUILD=$(cygpath -u \"$BUILD_WIN\"); cmake --build \"$BUILD\" -j"

      - name: List build outputs
        shell: cmd
        run: |
          dir E:\\io

      - name: Upload artifacts (binaries)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: windows-mingw64-${{ github.run_id }}
          path: |
            E:\\io\**
          if-no-files-found: warn
